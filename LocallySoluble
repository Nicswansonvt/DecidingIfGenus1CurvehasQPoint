PolynomialMakeIntergal := function(f)
    denom := [];
    for coeff in Coefficients(f) do
        denom := Append(denom, Denominator(coeff));
    end for;
    denom := LCM(denom);
    return f * denom;
end function;

CurveToIntegralPolynomial := function(C)
    return PolynomialMakeIntergal(DefiningPolynomial(C));
end function;

BadPrimeComputer := function(f)
    PR := Parent(f);
    x := PR.1;
    y := PR.2;
    h := UnivariatePolynomial(Resultant(f, Derivative(f, x), y));
    UPR := Parent(h);
    k := UPR ! UnivariatePolynomial(Resultant(f, Derivative(f, y), y)); 
    gcd := GCD(h, k);
    a := UPR ! (h div gcd);
    b := UPR ! (k div gcd);
    R := Resultant(a, b);
    factorization := PrimeDivisors(Integers() ! Numerator(R));
    return factorization;
end function;

BadPrimesForReal := function(f, range)
    C := Curve(AffineSpace(AlgebraicClosure(Rationals()), 2), [f]);
    p := 2;
    BadPrimes := [];
    for i in [1..range] do
        fp := PolynomialRing(GF(p), 2) ! f;
        if Degree(fp) ne 0 then
            Cp := Curve(AffineSpace(CoefficientRing(Parent(fp)), 2), [fp]);
            if #SingularPoints(Cp) gt #SingularPoints(C) then
                BadPrimes := Append(BadPrimes, p);
            end if;
        else
            if fp eq 0 then
                BadPrimes := Append(BadPrimes, p);
            end if;
        end if;
        p := NextPrime(p);
    end for;
    return BadPrimes;
end function;

RandomTest := function(d, S)
    P := ProjectivePlane(Rationals());
    C := RandomPlaneCurve(d, S, P);
    f := CurveToIntegralPolynomial(AffinePatch(C, 1));
    computed_bad_primes := BadPrimeComputer(f);
    real_bad_primes := BadPrimesForReal(1000);
    if real_bad_primes notsubset computed_bad_primes then
        printf("%o\n%o\n%o\n\n When x and y switched:\n", f, computed_bad_primes, real_bad_primes);
        printf("%o\n", BadPrimeComputer(Evaluate(f, [Parent(f).2, Parent(f).1])));
        return f;
    end if;
    return true;
end function;

d := 4;
S := [0];
for i in [1..100] do
    RandomTest(d, S)
end for;


